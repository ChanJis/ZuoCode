package chapter8;

import java.util.Comparator;
import java.util.Iterator;
import java.util.PriorityQueue;

//5.4号 找到无序数组中最小的k个数字
public class demo4 {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		int[] arr = {1,3,2,4,6,4,7,4};
		findKMin(arr,3);
	}
	
	
	public static void findKMin(int[] arr,int k){
		PriorityQueue<Integer> queue = new PriorityQueue<Integer>(
				k,new Comparator<Integer>(){
					@Override
					public int compare(Integer a, Integer b) {
						return (b-a);
					}
				});
//		
//		  PriorityQueue<Integer> queue = new PriorityQueue<Integer>(k,new Comparator<Integer>(){
//	            public int compare(Integer o1,Integer o2){
//	                return o2-o1;
//	            }
//	        });
		
		
		for(int i=0;i<arr.length;i++){
			if(queue.size()<k){
				queue.add(arr[i]);
			}
			else{
				 if(queue.peek()>arr[i]){
					queue.poll();
					queue.offer(arr[i]);
				}
			}				
		}
		
		Iterator it = queue.iterator();
		while(it.hasNext()){
			System.out.print(it.next()+" ");
		}
		
		
	}
	
}
